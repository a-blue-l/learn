let c = function() {
  return console.log(arguments[0]);
}
c('-------------------------操作符--------------------------')
c('**************一元操作符**************')
// 如果不是数值，执行的是Number操作
c(+1)
c(+'2')
c(+'2ab')
c(+true)
c(-true)
c(-false)
let nums = 1;
++nums
nums++
let num_b = ++nums + 1;
c(nums)
c(nums, num_b)

let string = 'abc';
c(string ++ )

c('**************位操作符**************')

c('**************关系操作符**************')
c('1>2 ' + ('1' > '2'))
c('a>b ' + ('a' > 'c'))
c('A>c ' + ('A' > 'a'))
c('3>2 ' + (3 > 2))
c('3>NAN ' + (3 > 'NAN'))
c('**************条件操作符**************')
c('**************相等操作符**************')
// 强制转换
// 规则
// 如果有布尔值，则转换成数字
// 如果一个是数字，一个是字符串，则将字符串转换成数值
// 如果都是对象，则对比是否为同一个引用
// null和undefined不会进行转换，null == undefined
// 其中一项有NAN的，相等操作符都为false，不相等操作符都为true
c([] != [])
c([] !== [])
c(0 / 0 != 0 / 0)
c(0 / 0 != 0 * Infinity)
c(0 / 0 != 2 % Infinity)
c(Infinity % 10)
c(10 % Infinity)
c(Infinity / Infinity)
c(2 / Infinity)
c(Infinity / 2)
c(0 / Infinity)
c(0 * Infinity)
c('**************赋值操作符**************')
c('**************布尔（逻辑）操作符**************')
c('**************乘性操作符**************')
c('**************加性操作符**************')
// 如果有字符串，则将另一项转换为字符串
// 减性则是将其转换为数值

c('-------------------------语句--------------------------')
c('**************while语句**************')
c('**************do while语句**************')
let mm = 3;
do{
  c(mm)
  mm++
}while(mm < 2)
c('**************for语句**************')
c('**************label语句**************')
// 用于做标记，常同for一起使用
var _n = 0;
outforname:
for(let a = 0; a < 10; a += 1){
  for(let b = 0; b < 2; b+=1){
    if(a === 5){
      break outforname
    }
    _n += 1;
  }
}
c(_n)
c('**************break/continue语句**************')
var _c = 0;
outforname:
for (let a = 0; a < 10; a += 1) {
  for (let b = 0; b < 2; b += 1) {
    if (a === 5) {
      continue outforname
    }
    _c += 1;
  }
}
c(_c)
c('**************for in语句**************')
// 下方写法等同于while
let i = 0;
for(;i<5;){
  c(i)
  i ++ 
}
c('**************switch语句**************')
c('**************with语句**************')
let obj = {
  name: '123'
}
with (obj) {
  // 作用域，this指向obj
  console.log(name)
}
c('**************命令参数、理解参数，无重载**************')
